{"version":3,"sources":["Pages/Error.js","context.js","Pages/Note.js","Pages/Notes.js","Components/Guide.js","Pages/Home.js","App.js","index.js"],"names":["Error","Container","Badge","bg","to","Button","AppContext","React","createContext","AppProvider","children","useState","localStorage","getItem","JSON","parse","notes","setNotes","useEffect","setItem","stringify","Provider","value","useGlobalContext","useContext","Note","note","setNote","id","useParams","newNote","find","noteID","titleValue","triggerValue","emotionValue","emotionPowerValue","automaticThoughtsValue","cognitiveDistortionsValue","challengeThoughtsValue","alternativeThoughtsValue","console","log","className","map","distortion","index","text","Notes","fluid","Row","xs","md","xl","Col","Card","Header","Body","Title","Text","variant","Guide","titleField","useRef","triggerField","emotionField","emotionPowerField","automaticThoughtsField","challengeThoughtsField","alternativeThoughtsField","history","useHistory","checkedDistortions","setCheckedDistortions","Form","onSubmit","e","preventDefault","current","Date","getTime","toString","push","Group","controlId","Label","Control","type","placeholder","ref","as","style","height","FloatingLabel","label","Select","Range","min","max","name","example","Check","onClick","Home","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32c97e84.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Badge, Button } from 'react-bootstrap'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <Container>\r\n            <h1>\r\n                Упс! Ошибочка вышла.  <Badge bg=\"danger\">Бля :(</Badge>\r\n            </h1>\r\n            <Link to=\"/\"><Button>Назад домой</Button></Link>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React, { useState, useContext } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nconst getLocalStorage = () => {\r\n    let notes = localStorage.getItem('notes');\r\n    if (notes) {\r\n        return JSON.parse(localStorage.getItem('notes'));\r\n    } else {\r\n        return []\r\n    }\r\n\r\n};\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [notes, setNotes] = useState(getLocalStorage());\r\n\r\n    useEffect(() => { localStorage.setItem('notes', JSON.stringify(notes)) }, [notes]);\r\n\r\n    return <AppContext.Provider value={{ notes, setNotes }}> {children} </AppContext.Provider>\r\n};\r\n\r\nexport const useGlobalContext = () => useContext(AppContext);\r\n\r\nexport { AppContext, AppProvider };","import React, { useState, useEffect } from 'react'\r\nimport { useGlobalContext } from '../context';\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { Container, Row, Col, Button, Card, Badge } from \"react-bootstrap\";\r\n\r\n\r\n\r\nconst Note = () => {\r\n    const { notes } = useGlobalContext();\r\n    const [note, setNote] = useState('')\r\n    const { id } = useParams();\r\n\r\n    useEffect(() => {\r\n        const newNote = notes.find(note => note.noteID === id);\r\n        setNote(newNote)\r\n    }, [])\r\n\r\n    if (note) {\r\n        const { noteID, titleValue, triggerValue, emotionValue, emotionPowerValue, automaticThoughtsValue, cognitiveDistortionsValue, challengeThoughtsValue, alternativeThoughtsValue } = note;\r\n        console.log(cognitiveDistortionsValue);\r\n        return (\r\n            <Container className=\"my-5\">\r\n                <h1>{titleValue}</h1>\r\n                <div className=\"my-3\">\r\n                    <Badge bg=\"info\">{emotionValue}</Badge>\r\n                    <Badge bg=\"info\" className=\"mx-3\">{emotionPowerValue}/10</Badge>\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    {cognitiveDistortionsValue.map((distortion, index) =>\r\n                        <Badge bg=\"light\" text=\"dark\" key={index}>{distortion}</Badge>\r\n                    )}\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    <h5>Описание ситуации</h5>\r\n                    <p>{triggerValue}</p>\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    <h5>Автоматические мысли</h5>\r\n                    <p>{automaticThoughtsValue}</p>\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    <h5>Челлендж автоматических мыслей</h5>\r\n                    <p>{challengeThoughtsValue}</p>\r\n                </div>\r\n                <div className=\"my-3\">\r\n                    <h5>Альтернативные мысли</h5>\r\n                    <p>{alternativeThoughtsValue}</p>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <h1 className=\"text-center\">Пока вы не сделали ни одной заметки</h1>\r\n        </Container >\r\n    )\r\n\r\n}\r\n\r\nexport default Note;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Row, Col, Button, Card } from \"react-bootstrap\";\r\nimport Note from './Note';\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nconst Notes = () => {\r\n    const { notes } = useGlobalContext();\r\n    return (\r\n        <Container>\r\n            <h1>\r\n                Ваши записи\r\n            </h1>\r\n            <Container fluid>\r\n                <Row xs={1} md={3} xl={4} className=\"g-4\">\r\n                    {notes.map((note) => {\r\n                        return (\r\n                            <Col key={note.noteID}>\r\n                                <Card>\r\n                                    <Card.Header>{note.titleValue}</Card.Header>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Описание ситуации</Card.Title>\r\n                                        <Card.Text>{note.triggerValue}</Card.Text>\r\n                                        <Link to={`/note/${note.noteID}`}><Button variant=\"primary\">Подробнее</Button></Link>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    })}\r\n                </Row>\r\n            </Container>\r\n            <Link to=\"/\"><Button>Назад домой</Button></Link>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Form, Button, FloatingLabel } from \"react-bootstrap\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Note from \"../Pages/Note\";\r\nimport Notes from \"../Pages/Notes\";\r\n\r\nconst Guide = () => {\r\n    const { notes, setNotes } = useGlobalContext();\r\n    const titleField = React.useRef('');\r\n    const triggerField = React.useRef('');\r\n    const emotionField = React.useRef('');\r\n    const emotionPowerField = React.useRef('');\r\n    const automaticThoughtsField = React.useRef('');\r\n    const challengeThoughtsField = React.useRef('');\r\n    const alternativeThoughtsField = React.useRef('');\r\n\r\n    let history = useHistory();\r\n\r\n\r\n    const cognitiveDistortions = [\r\n        { name: 'Катастрофизация', example: 'Что если случится худшее?' },\r\n        { name: 'Черно-белое мышление', example: 'Я полный неудачник' },\r\n        { name: 'Эмоциональное рассуждение', example: 'Я так чувствую, стало быть это правда' },\r\n        { name: 'Усиление негатива', example: 'Я абсолютно все загубил ' },\r\n        { name: 'Минимизация позитива', example: 'Они так сказали просто из вежливости' },\r\n        { name: 'Поспешные выводы', example: 'Она со мной не поздаровалась, следовательно, она меня ненавидит' },\r\n        { name: 'Предсказание будущего', example: 'Я наверняка провалю мой экзамен' },\r\n        { name: 'Чтение мыслей', example: 'Он не хотел со мной говорить' },\r\n        { name: 'Обвинение себя', example: 'Это все я виноват' },\r\n        { name: 'Обвинение других', example: 'Это они во всем виноваты' }\r\n    ];\r\n\r\n    // store active checkboxes values (instead of useRef)\r\n    const [checkedDistortions, setCheckedDistortions] = useState([]);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n\r\n        const [titleValue, triggerValue, emotionValue, emotionPowerValue, automaticThoughtsValue, cognitiveDistortionsValue, challengeThoughtsValue, alternativeThoughtsValue] = [titleField.current.value, triggerField.current.value, emotionField.current.value, emotionPowerField.current.value, automaticThoughtsField.current.value, checkedDistortions, challengeThoughtsField.current.value, alternativeThoughtsField.current.value]\r\n        const noteID = new Date().getTime().toString();\r\n        const newNote = { noteID, titleValue, triggerValue, emotionValue, emotionPowerValue, automaticThoughtsValue, cognitiveDistortionsValue, challengeThoughtsValue, alternativeThoughtsValue }\r\n        setNotes([...notes, newNote]);\r\n\r\n        history.push(`/note/${noteID}`)\r\n\r\n    }\r\n\r\n    return (\r\n        <Container className=\"d-flex flex-column align-items-center justify-content-center my-5\">\r\n\r\n            <Form className=\"w-50\" onSubmit={handleSubmit}>\r\n                <Form.Group className=\"mb-3\" controlId=\"trigger\">\r\n                    <Form.Label>Ситуация/Триггер</Form.Label>\r\n                    <Form.Control type=\"Text\" placeholder=\"Что случилось?\" ref={titleField} />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"trigger\">\r\n                    <Form.Label>Описание ситуации</Form.Label>\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        placeholder=\"Изложите факты о ситуации\"\r\n                        style={{ height: '70px' }}\r\n                        ref={triggerField}\r\n                    />\r\n                    {/* <Form.Control type=\"Text\" placeholder=\"Изложите факты о ситуации\" ref={triggerField} /> */}\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"emotion\">\r\n                    <Form.Label>Эмоция</Form.Label>\r\n                    <FloatingLabel label=\"Что вы почувствовали?\">\r\n                        <Form.Select aria-label=\"Emotions select\" ref={emotionField}>\r\n                            <option>Выберите самую яркую эмоцию</option>\r\n                            <option value=\"Anger\">Гнев, возмущение</option>\r\n                            <option value=\"Anxiety\">Страх, тревога</option>\r\n                            <option value=\"Depression\">Грусть, разочарование</option>\r\n                            <option value=\"Guilt\">Вина, сожаление</option>\r\n                            <option value=\"Shame\">Стыд, смущение</option>\r\n                            <option value=\"Happiness\">Радость, возбуждение</option>\r\n                            <option value=\"Love\">Любовь, благодарность</option>\r\n                        </Form.Select>\r\n                    </FloatingLabel>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"emotion-power\">\r\n                    <Form.Label>Сила эмоции</Form.Label>\r\n                    <Form.Range min=\"1\" max=\"10\" ref={emotionPowerField} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"automatic-thoughts\">\r\n                    <Form.Label>Автоматические мысли</Form.Label>\r\n\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        placeholder=\"Напишите мысли, которые возникли у вас в этой ситуации\"\r\n                        style={{ height: '70px' }}\r\n                        ref={automaticThoughtsField}\r\n                    />\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"my-4\" controlId=\"cognitive-distortions\">\r\n\r\n                    <Form.Label className=\"d-block\">Когнитивные искажения</Form.Label>\r\n                    <Form.Text>Выберите те когнитивные искажения, которые вы нашли в своих автоматических мыслях:</Form.Text>\r\n                    <Container className=\"mt-3\">\r\n                        {/* <Form.Check type=\"checkbox\" id={`${cognitiveDistortions[0].name}`} label={`${cognitiveDistortions[0].name}`} ref={cognitiveDistortionsField} />\r\n                        <Form.Text>{cognitiveDistortions[0].example}</Form.Text> */}\r\n                        {cognitiveDistortions.map((distortion, index) =>\r\n                            <div key={`key-${distortion.name}`} className=\"mb-3\">\r\n                                <Form.Check\r\n                                    type=\"checkbox\"\r\n                                    id={`${distortion.name}`}\r\n                                    label={`${distortion.name}`}\r\n                                    // check what will be if i click and then click again and fix if bug\r\n                                    onClick={() => {\r\n                                        setCheckedDistortions([...checkedDistortions, distortion.name]);\r\n                                    }}\r\n                                />\r\n                                <Form.Text>{distortion.example}</Form.Text>\r\n\r\n\r\n                            </div>\r\n                        )}\r\n                    </Container>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"challenge-thoughts\">\r\n                    <Form.Label>Челлендж автоматических мыслей</Form.Label>\r\n\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        placeholder=\"Перечислите факты, опровергающие эти мысли\"\r\n                        style={{ height: '70px' }}\r\n                        ref={challengeThoughtsField}\r\n                    />\r\n\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"alternative-thoughts\">\r\n                    <Form.Label>Альтернативные мысли</Form.Label>\r\n\r\n                    <Form.Control\r\n                        as=\"textarea\"\r\n                        placeholder=\"Напишите, как можно более реалистично и гибко подумать о ситуации\"\r\n                        style={{ height: '70px' }}\r\n                        ref={alternativeThoughtsField}\r\n                    />\r\n\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n\r\n\r\n\r\n            </Form>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Guide;","const Home = () => {\r\n    return (\r\n        <h1>Hello world!</h1>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Error from './Pages/Error';\nimport Notes from './Pages/Notes';\nimport Note from './Pages/Note';\nimport Guide from \"./Components/Guide\";\nimport Home from './Pages/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/guide\">\n          <Guide />\n        </Route>\n        <Route path=\"/notes\">\n          <Notes />\n        </Route>\n        <Route path=\"/note/:id\" children={<Note />}>\n        </Route>\n        <Route path=\"*\">\n          <Error />\n        </Route>\n\n      </Switch>\n    </Router>\n\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AppProvider } from './context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}